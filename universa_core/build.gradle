group 'com.icodici'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    localDeps
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'
    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.9'
    //    compile group:'org.mapdb', name:'mapdb', version:'3.0.5'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.1'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.9.1'
    localDeps project(':common_tools')
    localDeps project(':contrib:nanohttpd')
    localDeps project(':crypto')
    compile configurations.localDeps

    processResources
    processTestResources
}

// Just build the class .jar itself
jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    archiveName = 'uninode.jar'

    manifest {
        attributes 'Main-Class': 'com.icodici.universa.node2.Main',
                'Class-Path': configurations.runtime.files.collect { "$it.name" }.join(' ')
    }
}

task buildMultiJar(type: Copy) {
    dependsOn build
    into "$buildDir/output"
    from configurations.runtime
    from jar
}
//build.dependsOn(buildMultiJar)

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar with all dependencies',
                'Implementation-Version': version,
                'Main-Class': 'com.icodici.universa.node2.Main'
    }
//    baseName = project.name + '-all'
    archiveName = 'uninode-all.jar'
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task contractsServiceJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    include("**/ContractsService.java")
    destinationDir = file("../docs/ContractsService/javadoc")
}

task nodeJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    include("**/node2/Node.java")
    destinationDir = file("../docs/node/javadoc")
}